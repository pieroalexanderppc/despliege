const ChatSession = require('../models/ChatSession');
const User = require('../models/User');
const { randomUUID } = require('crypto');

const seedChatSessions = async () => {
  try {
    // Limpiar sesiones existentes
    await ChatSession.deleteMany({});
    console.log('üßπ Sesiones de chat existentes eliminadas');

    // Obtener algunos usuarios para asociar sesiones
    const users = await User.find().limit(5);
    if (users.length === 0) {
      throw new Error('No hay usuarios disponibles. Ejecuta seed de usuarios primero.');
    }

    const chatSessions = [];
    
    // Generar sesiones de ejemplo
    for (let i = 0; i < 25; i++) {
      const randomUser = users[Math.floor(Math.random() * users.length)];
      const sessionId = randomUUID();
      
      // Generar mensajes de ejemplo
      const messages = [];
      const messageCount = Math.floor(Math.random() * 10) + 3; // 3-12 mensajes
      
      for (let j = 0; j < messageCount; j++) {
        if (j % 2 === 0) {
          // Mensaje del usuario
          messages.push({
            messageId: randomUUID(),
            sender: 'user',
            content: getRandomUserMessage(),
            timestamp: new Date(Date.now() - (messageCount - j) * 60000), // Espaciados por minutos
            metadata: {}
          });
        } else {
          // Respuesta del bot
          messages.push({
            messageId: randomUUID(),
            sender: 'bot',
            content: getRandomBotResponse(),
            timestamp: new Date(Date.now() - (messageCount - j) * 60000 + 30000), // 30 segundos despu√©s
            metadata: {
              confidence: Math.random() * 0.3 + 0.7, // Confianza entre 0.7 y 1.0
              intent: getRandomIntent(),
              entities: []
            }
          });
        }
      }

      const status = ['active', 'completed', 'abandoned'][Math.floor(Math.random() * 3)];
      const isCompleted = status === 'completed';
      
      const session = {
        sessionId,
        userId: randomUser._id,
        status,
        startTime: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000), // √öltima semana
        endTime: isCompleted ? new Date() : undefined,
        messages,
        summary: {
          totalMessages: messages.length,
          userMessages: messages.filter(m => m.sender === 'user').length,
          botMessages: messages.filter(m => m.sender === 'bot').length,
          avgConfidence: messages
            .filter(m => m.metadata.confidence)
            .reduce((acc, m) => acc + m.metadata.confidence, 0) / 
            messages.filter(m => m.metadata.confidence).length || 0,
          mainTopics: getRandomTopics(),
          resolved: isCompleted ? Math.random() > 0.3 : false // 70% de sesiones completadas son resueltas
        },
        feedback: isCompleted && Math.random() > 0.5 ? {
          rating: Math.floor(Math.random() * 2) + 4, // Rating 4-5
          comment: getRandomFeedback(),
          helpful: Math.random() > 0.2, // 80% helpful
          timestamp: new Date()
        } : undefined,
        context: {
          userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
          ip: `192.168.1.${Math.floor(Math.random() * 255)}`,
          referrer: 'https://upt.edu.pe',
          device: ['desktop', 'mobile', 'tablet'][Math.floor(Math.random() * 3)],
          location: 'Tacna, Per√∫'
        }
      };

      chatSessions.push(session);
    }

    // Insertar sesiones
    const insertedSessions = await ChatSession.insertMany(chatSessions);
    
    console.log(`‚úÖ ${insertedSessions.length} sesiones de chat insertadas correctamente`);
    
    return {
      success: true,
      count: insertedSessions.length,
      breakdown: {
        active: insertedSessions.filter(s => s.status === 'active').length,
        completed: insertedSessions.filter(s => s.status === 'completed').length,
        abandoned: insertedSessions.filter(s => s.status === 'abandoned').length
      }
    };

  } catch (error) {
    console.error('‚ùå Error seeding chat sessions:', error);
    throw error;
  }
};

// Funciones auxiliares para generar contenido realista
function getRandomUserMessage() {
  const messages = [
    '¬øC√≥mo puedo matricularme para el pr√≥ximo semestre?',
    'Necesito informaci√≥n sobre becas disponibles',
    '¬øCu√°les son los horarios de la biblioteca?',
    'Tengo problemas para acceder al aula virtual',
    '¬øD√≥nde puedo pagar mi pensi√≥n estudiantil?',
    'Necesito el certificado de estudios',
    '¬øCu√°ndo son los ex√°menes finales?',
    'No puedo ver mis notas en el sistema',
    '¬øC√≥mo contacto con mi asesor acad√©mico?',
    'Informaci√≥n sobre pr√°cticas profesionales',
    '¬øQu√© documentos necesito para titularme?',
    'Tengo dudas sobre mi malla curricular'
  ];
  return messages[Math.floor(Math.random() * messages.length)];
}

function getRandomBotResponse() {
  const responses = [
    'Te ayudo con informaci√≥n sobre el proceso de matr√≠cula. Puedes acceder al sistema desde...',
    'Para informaci√≥n sobre becas, te recomiendo contactar con Bienestar Estudiantil en...',
    'La biblioteca tiene horarios de 7:00 AM a 10:00 PM de lunes a s√°bado...',
    'Para problemas con el aula virtual, puedes contactar con soporte t√©cnico al...',
    'Los pagos se pueden realizar en tesorer√≠a o a trav√©s de los bancos autorizados...',
    'Para solicitar certificados, debes dirigirte a la oficina de registros acad√©micos...',
    'Las fechas de ex√°menes finales se publican en el calendario acad√©mico disponible en...',
    'Si no puedes ver tus notas, verifica que no tengas pagos pendientes...',
    'Tu asesor acad√©mico est√° asignado seg√∫n tu facultad. Puedes encontrar su informaci√≥n en...',
    'Para pr√°cticas profesionales, debes haber completado el 75% de tu carrera...',
    'Los requisitos para titulaci√≥n incluyen: expediente completo, no tener deudas...',
    'Tu malla curricular est√° disponible en tu portal estudiante, secci√≥n acad√©mica...'
  ];
  return responses[Math.floor(Math.random() * responses.length)];
}

function getRandomIntent() {
  const intents = [
    'matricula_info',
    'becas_consulta',
    'biblioteca_horarios',
    'soporte_tecnico',
    'pagos_consulta',
    'certificados_tramite',
    'examenes_fechas',
    'notas_consulta',
    'asesoria_academica',
    'practicas_info',
    'titulacion_requisitos',
    'malla_curricular'
  ];
  return intents[Math.floor(Math.random() * intents.length)];
}

function getRandomTopics() {
  const topics = [
    ['matr√≠cula', 'inscripci√≥n'],
    ['becas', 'apoyo econ√≥mico'],
    ['biblioteca', 'horarios'],
    ['soporte', 't√©cnico', 'sistema'],
    ['pagos', 'pensiones'],
    ['certificados', 'documentos'],
    ['ex√°menes', 'evaluaciones'],
    ['notas', 'calificaciones'],
    ['asesor√≠a', 'acad√©mica'],
    ['pr√°cticas', 'profesionales'],
    ['titulaci√≥n', 'grado'],
    ['curricular', 'plan de estudios']
  ];
  return topics[Math.floor(Math.random() * topics.length)];
}

function getRandomFeedback() {
  const feedback = [
    'Muy √∫til la informaci√≥n proporcionada',
    'Resolvi√≥ completamente mi consulta',
    'R√°pido y eficiente',
    'La informaci√≥n estaba actualizada',
    'Excelente servicio de atenci√≥n',
    'Me ayud√≥ mucho, gracias',
    'Claro y preciso en las respuestas'
  ];
  return feedback[Math.floor(Math.random() * feedback.length)];
}

module.exports = seedChatSessions;